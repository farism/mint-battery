{"name":"mint-battery","dependencies":[],"components":[],"stores":[],"modules":[{"description":null,"name":"Battery","functions":[{"type":"Promise(Number)","description":"<p>Returns the amount of time, in seconds, that remain until the battery is fully charged or <code>0</code> if the battery is already fully charged. If the battery is currently discharging, its value is <code>Infinity</code>.</p>\n","name":"chargingTime","source":"/* Returns the amount of time, in seconds, that remain until the battery is fully charged or `0` if the battery is already fully charged. If the battery is currently discharging, its value is `Infinity`. */\nfun chargingTime : Promise(Number) {\n  case await get() {\n    Maybe::Just(b) => `#{b}.chargingTime`\n    => Maybe.withDefault(Number.fromString(\"Infinity\"), 0)\n  }\n}","arguments":[]},{"type":"Promise(Number)","description":"<p>Returns the amount of time, in seconds, that remains until the battery is fully discharged, or <code>Infinity</code> if the battery is currently charging rather than discharging, or if the system is unable to report the remaining discharging time.</p>\n","name":"dischargingTime","source":"/* Returns the amount of time, in seconds, that remains until the battery is fully discharged, or `Infinity` if the battery is currently charging rather than discharging, or if the system is unable to report the remaining discharging time. */\nfun dischargingTime : Promise(Number) {\n  case await get() {\n    Maybe::Just(b) => `#{b}.dischargingTime`\n    => Maybe.withDefault(Number.fromString(\"Infinity\"), 0)\n  }\n}","arguments":[]},{"type":"Promise(Maybe(Battery))","description":"<p>Returns a Promise which may resolve to a <code>BatteryManager</code> instance</p>\n","name":"get","source":"/* Returns a Promise which may resolve to a `BatteryManager` instance */\nfun get : Promise(Maybe(Battery)) {\n  await `\n    (() => {\n      return window.navigator\n        .getBattery()\n        .then(($battery) => #{Maybe::Just(`$battery`)})\n        .catch(() => #{Maybe::Nothing})\n    })()\n    `\n}","arguments":[]},{"type":"Promise(Bool)","description":"<p>Returns a boolean value indicating whether or not the device's battery is currently being charged.</p>\n","name":"isCharging","source":"/* Returns a boolean value indicating whether or not the device's battery is currently being charged. */\nfun isCharging : Promise(Bool) {\n  case await get() {\n    Maybe::Just(b) => `#{b}.charging`\n    => true\n  }\n}","arguments":[]},{"type":"Promise(Number)","description":"<p>Returns the current battery charge level as a value between <code>0.0</code> and <code>1.0</code>. A value of <code>0.0</code> means the battery is empty and the system is about to be suspended. A value of <code>1.0</code> means the battery is full. A value of <code>1.0</code> is also returned if the implementation isn't able to determine the battery charge level or if the system is not battery-powered.</p>\n","name":"level","source":"/* Returns the current battery charge level as a value between `0.0` and `1.0`. A value of `0.0` means the battery is empty and the system is about to be suspended. A value of `1.0` means the battery is full. A value of `1.0` is also returned if the implementation isn't able to determine the battery charge level or if the system is not battery-powered. */\nfun level : Promise(Number) {\n  case await get() {\n    Maybe::Just(b) => `#{b}.level`\n    => 1\n  }\n}","arguments":[]}]}],"providers":[{"description":"<p>A provider for the <code>[BatteryManager](https://developer.mozilla.org/docs/Web/API/BatteryManager)</code> API.</p>\n","subscription":"Provider.Battery.Subscription","name":"Provider.Battery","functions":[{"type":null,"description":null,"name":"change","source":"fun change {\n  notify(battery)\n}","arguments":[]},{"type":null,"description":null,"name":"notify","source":"fun notify (battery : Maybe(Battery)) {\n  case battery {\n    Maybe::Just(b) =>\n      for subscription of subscriptions {\n        subscription.changes(`#{b}.charging`, `#{b}.chargingTime`, `#{b}.dischargingTime`, `#{b}.level`)\n      }\n\n    => []\n  }\n}","arguments":[{"type":"Maybe(Battery)","name":"battery"}]},{"type":"Promise(Void)","description":null,"name":"update","source":"fun update : Promise(Void) {\n  if Array.isEmpty(subscriptions) {\n    next { }\n  } else if battery == Maybe::Nothing {\n    let battery =\n      await Battery.get()\n\n    notify(battery)\n\n    case battery {\n      Maybe::Just(b) =>\n        {\n          `#{b}.addEventListener('chargingchange', #{change})`\n          `#{b}.addEventListener('chargingtimechange', #{change})`\n          `#{b}.addEventListener('dischargingtimechange', #{change})`\n          `#{b}.addEventListener('levelchange', #{change})`\n        }\n\n      =>\n        { }\n    }\n\n    next { battery: battery }\n  } else {\n    next { }\n  }\n}","arguments":[]}]}],"records":[{"description":"<p>Represents a subscription for <code>Provider.Battery</code></p>\n","name":"Provider.Battery.Subscription","fields":[{"key":"changes","type":"Function(Bool, Number, Number, Number, Promise(Void))","mapping":null}]}],"enums":[]}